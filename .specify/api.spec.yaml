meta:
  id: rave-simulator-api
  title: RAVE Simulator REST API (V3 - Contract Tests)
  version: 3.0.0
  description: |
    REST API with examples, error handling, and control endpoints to enable contract testing.

servers:
  - url: http://localhost:3000
    description: Local simulator

endpoints:
  /health:
    get:
      summary: Health check
      responses:
        200:
          schema:
            type: object
            properties: { status: { type: string, enum: ["ok"] } }
            required: [status]
          examples:
            success: { status: "ok" }

  /api/studies/{studyId}/subjects:
    get:
      summary: List subjects for a study
      params:
        - name: studyId
          in: path
          required: true
          schema: { type: string }
      responses:
        200:
          schema:
            type: array
            items: { $ref: "#/models/Subject" }
          examples:
            empty: []
        400:
          schema: { $ref: "#/models/Error" }

  /api/studies/{studyId}/forms:
    get:
      summary: List forms for a study (optional subject filter)
      params:
        - { name: studyId, in: path, required: true, schema: { type: string } }
        - { name: subjectId, in: query, required: false, schema: { type: string } }
      responses:
        200:
          schema:
            type: array
            items: { $ref: "#/models/FormRecord" }
        400:
          schema: { $ref: "#/models/Error" }

  /api/studies/{studyId}/queries:
    get:
      summary: List queries for a study
      params:
        - { name: studyId, in: path, required: true, schema: { type: string } }
      responses:
        200:
          schema:
            type: array
            items: { $ref: "#/models/Query" }
        400:
          schema: { $ref: "#/models/Error" }

  /api/control/tick:
    post:
      summary: Advance simulation one tick (for test steering)
      responses:
        200:
          schema:
            type: object
            properties: { status: { type: string } }
            required: [status]
          examples:
            ok: { status: "advanced" }

models:
  Error:
    type: object
    properties:
      message: { type: string }
    required: [message]

  Subject:
    type: object
    properties:
      id: { type: string }
      studyId: { type: string }
      siteId: { type: string }
      subjectCode: { type: string }
    required: [id, studyId, siteId, subjectCode]

  FormRecord:
    type: object
    properties:
      id: { type: string }
      studyId: { type: string }
      subjectId: { type: string }
      siteId: { type: string }
      name: { type: string }
      data: { type: object, additionalProperties: true }
      lastUpdated: { type: string }
    required: [id, studyId, subjectId, siteId, name, data, lastUpdated]

  Query:
    type: object
    properties:
      id: { type: string }
      studyId: { type: string }
      formId: { type: string }
      field: { type: string }
      type: { type: string, enum: ["MissingData", "OutOfRange", "Inconsistency"] }
      status: { type: string, enum: ["Open", "Answered", "Closed"] }
      text: { type: string }
      createdAt: { type: string }
    required: [id, studyId, formId, field, type, status, text, createdAt]
